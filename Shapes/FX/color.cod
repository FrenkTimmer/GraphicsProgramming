//
// FX Version: fx_5_0
//
// 1 local buffer(s)
//
cbuffer cbPerObject
{
    float   gMichaelTime;               // Offset:    0, size:    4
    float4x4 gWorldViewProj;            // Offset:   16, size:   64
}

//
// 1 groups(s)
//
fxgroup
{
    //
    // 1 technique(s)
    //
    technique11 ColorTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float gMichaelTime;                // Offset:    0 Size:     4 [unused]
                //   float4x4 gWorldViewProj;           // Offset:   16 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // COLOR                    0   xyzw        1     NONE  float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[5], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyzw
                dcl_temps 2
                
                #line 31 "C:\Users\Frenk-PC\Downloads\2017_04_11_13_01_49_timmerf001_500709061_timmer_frenk\Shapes\FX\color.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[1].xyzw  // vout<0:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[2].xyzw  // vout<1:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[3].xyzw  // vout<2:NaN:Inf>
                dp4 r1.w, r0.xyzw, cb0[4].xyzw  // vout<3:NaN:Inf>
                
                #line 34
                mov r0.xyzw, v1.xyzw  // vout<4,5,6,7>
                mov o0.xyzw, r1.xyzw  // VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyzw, r0.xyzw  // VS<4,5,6,7>
                ret 
                // Approximately 10 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float gMichaelTime;                // Offset:    0 Size:     4
                //   float4x4 gWorldViewProj;           // Offset:   16 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // sv_position              0   xyzw        0      POS  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[1], immediateIndexed
                dcl_input_ps_siv linear noperspective v0.xy, position
                dcl_output o0.xyzw
                dcl_temps 7
                
                #line 71 "C:\Users\Frenk-PC\Downloads\2017_04_11_13_01_49_timmerf001_500709061_timmer_frenk\Shapes\FX\color.fx"
                div r0.xy, v0.xyxx, l(400.000000, 300.000000, 0.000000, 0.000000)  // uv<0:[-8.50706e+035f,8.50706e+035f],1:[-1.13427e+036f,1.13427e+036f]>
                mul r0.xy, r0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000)
                add r0.xy, r0.xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)  // uv<0:[-1.70141e+036f,1.70141e+036f],1:[-2.26855e+036f,2.26855e+036f]>
                mov r0.x, -r0.x
                add r0.x, r0.x, l(1.000000)  // uv<0:[-1.70141e+036f,1.70141e+036f]>
                mov r0.y, -r0.y
                add r0.y, r0.y, l(1.000000)  // uv<1:[-2.26855e+036f,2.26855e+036f]>
                
                #line 77
                mul r0.x, r0.x, l(1.333333)  // uv<0:[-2.26855e+036f,2.26855e+036f]>
                
                #line 82
                div r0.z, cb0[0].x, l(3.141593)
                add r0.z, r0.z, l(12345.123047)
                mul r0.w, r0.z, l(0.601411)
                mul r0.w, r0.w, l(0.500000)
                sincos r0.w, null, r0.w  // s1<0:[-1f,1f]>
                
                #line 88
                mul r1.z, r0.z, l(0.511270)  // origin<2:[-5.53783e+037f,5.53783e+037f]>
                mov r1.x, l(0)  // origin<0: 0f>
                
                #line 91
                mul r2.y, r0.x, l(0.970000)  // uv<0:[-2.20049e+036f,2.20049e+036f]>
                mul r2.z, r0.y, l(0.970000)  // uv<1:[-2.20049e+036f,2.20049e+036f]>
                mov r2.w, l(0.500000)
                dp3 r0.x, r2.yzwy, r2.yzwy
                rsq r0.x, r0.x
                mul r3.yzw, r0.xxxx, r2.yyzw  // ray<0:NaN,1:NaN,2:NaN>
                
                #line 97
                mul r0.x, r0.z, l(1.376059)
                dp2 r0.y, r2.yzyy, r2.yzyy
                sqrt r0.y, r0.y
                mul r0.y, r0.w, r0.y
                add r0.y, r0.y, r0.x  // the<0:NaN>
                sincos null, r4.x, r0.y
                sincos r4.y, null, r0.y
                dp2 r3.x, r3.yzyy, r4.xyxx  // ray<0:NaN>
                
                #line 101
                mul r0.y, r0.z, l(0.649298)
                mul r0.y, r0.y, l(0.100000)  // the<0:[-7.03289e+036f,7.03289e+036f]>
                sincos null, r4.x, r0.y
                sincos r1.y, null, r0.y
                mov r5.x, -r1.y
                sincos r4.y, null, r0.y
                sincos null, r5.y, r0.y
                dp2 r4.x, r3.xwxx, r4.xyxx  // ray<0:NaN>
                dp2 r4.z, r3.xwxx, r5.xyxx  // ray<2:NaN>
                nop 
                mov r1.xz, r1.xxzx  // origin<0: 0f,2:[-5.53783e+037f,5.53783e+037f]>
                mov r4.xz, r4.xxzx  // ray<0:NaN,2:NaN>
                
                #line 60
                mov r1.w, l(0)  // t<0: -0f>
                mov r2.x, r1.w  // t<0:NaN:Inf>
                mov r2.w, r1.w  // i<0>
                loop 
                  ilt r3.x, r2.w, l(18)
                  breakc_z r3.x
                  mul r3.xy, r2.xxxx, r4.xzxx
                  add r3.xy, r1.xzxx, r3.xyxx  // p<0:NaN:Inf,2:NaN:Inf>
                  nop 
                  mov r3.xy, r3.xyxx  // p<0:NaN:Inf,2:NaN:Inf>
                
                #line 52
                  mul r3.xy, r3.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
                  frc r3.xy, r3.xyxx
                  mul r3.xy, r3.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000)
                  add r3.xz, r3.xxyx, l(-1.000000, 0.000000, -1.000000, 0.000000)  // q<0:NaN,2:NaN>
                  mul r3.y, r3.x, l(0.500000)  // q<1:NaN>
                  dp3 r3.x, r3.xyzx, r3.xyzx
                  sqrt r3.x, r3.x
                  add r3.x, r3.x, l(-0.300000)  // map<0:NaN>
                
                #line 63
                  mov r3.x, r3.x  // d<0:NaN>
                  mul r3.x, r3.x, l(0.500000)
                  add r2.x, r2.x, r3.x  // t<0:NaN:Inf>
                
                #line 61
                  iadd r2.w, r2.w, l(1)  // i<0>
                endloop 
                
                #line 66
                mov r2.x, r2.x  // trace<0:NaN:Inf>
                
                #line 104
                mov r2.x, r2.x  // t<0:NaN:Inf>
                
                #line 107
                mul r1.x, r2.x, r2.x
                mul r1.x, r1.x, l(0.070000)
                add r1.x, r1.x, l(1.000000)
                div r3.x, l(1.000000), r1.x  // c<0:NaN>
                
                #line 88
                mul r1.z, r0.z, l(0.511270)  // origin<2:[-5.53783e+037f,5.53783e+037f]>
                mov r1.x, l(0)  // origin<0: 0f>
                
                #line 91
                mul r4.y, r2.y, l(0.970000)  // uv<0:[-2.13448e+036f,2.13448e+036f]>
                mul r4.z, r2.z, l(0.970000)  // uv<1:[-2.13448e+036f,2.13448e+036f]>
                mov r4.w, l(0.500000)
                dp3 r2.x, r4.yzwy, r4.yzwy
                rsq r2.x, r2.x
                mul r2.yzw, r2.xxxx, r4.yyzw  // ray<0:NaN,1:NaN,2:NaN>
                
                #line 97
                dp2 r3.w, r4.yzyy, r4.yzyy
                sqrt r3.w, r3.w
                mul r3.w, r0.w, r3.w
                add r3.w, r0.x, r3.w  // the<0:NaN>
                sincos null, r5.x, r3.w
                sincos r5.y, null, r3.w
                dp2 r2.x, r2.yzyy, r5.xyxx  // ray<0:NaN>
                
                #line 102
                sincos null, r5.x, r0.y
                mov r6.x, -r1.y
                sincos r5.y, null, r0.y
                sincos null, r6.y, r0.y
                dp2 r5.x, r2.xwxx, r5.xyxx  // ray<0:NaN>
                dp2 r5.z, r2.xwxx, r6.xyxx  // ray<2:NaN>
                nop 
                mov r1.xz, r1.xxzx  // origin<0: 0f,2:[-5.53783e+037f,5.53783e+037f]>
                mov r5.xz, r5.xxzx  // ray<0:NaN,2:NaN>
                
                #line 61
                mov r2.x, r1.w  // t<0:NaN:Inf>
                mov r2.y, r1.w  // i<0>
                loop 
                  ilt r2.z, r2.y, l(18)
                  breakc_z r2.z
                  mul r2.zw, r2.xxxx, r5.xxxz
                  add r2.zw, r1.xxxz, r2.zzzw  // p<0:NaN:Inf,2:NaN:Inf>
                  nop 
                  mov r2.zw, r2.zzzw  // p<0:NaN:Inf,2:NaN:Inf>
                
                #line 52
                  mul r2.zw, r2.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000)
                  frc r2.zw, r2.zzzw
                  mul r2.zw, r2.zzzw, l(0.000000, 0.000000, 2.000000, 2.000000)
                  add r6.xz, r2.zzwz, l(-1.000000, 0.000000, -1.000000, 0.000000)  // q<0:NaN,2:NaN>
                  mul r6.y, r6.x, l(0.500000)  // q<1:NaN>
                  dp3 r2.z, r6.xyzx, r6.xyzx
                  sqrt r2.z, r2.z
                  add r2.z, r2.z, l(-0.300000)  // map<0:NaN>
                
                #line 63
                  mov r2.z, r2.z  // d<0:NaN>
                  mul r2.z, r2.z, l(0.500000)
                  add r2.x, r2.z, r2.x  // t<0:NaN:Inf>
                
                #line 61
                  iadd r2.y, r2.y, l(1)  // i<0>
                endloop 
                
                #line 66
                mov r2.x, r2.x  // trace<0:NaN:Inf>
                
                #line 104
                mov r2.x, r2.x  // t<0:NaN:Inf>
                
                #line 107
                mul r1.x, r2.x, r2.x
                mul r1.x, r1.x, l(0.070000)
                add r1.x, r1.x, l(1.000000)
                div r3.y, l(1.000000), r1.x  // c<1:NaN>
                
                #line 88
                mul r1.z, r0.z, l(0.511270)  // origin<2:[-5.53783e+037f,5.53783e+037f]>
                mov r1.x, l(0)  // origin<0: 0f>
                
                #line 91
                mul r2.y, r4.y, l(0.970000)  // uv<0:[-2.07044e+036f,2.07044e+036f]>
                mul r2.z, r4.z, l(0.970000)  // uv<1:[-2.07044e+036f,2.07044e+036f]>
                mov r2.w, l(0.500000)
                dp3 r0.z, r2.yzwy, r2.yzwy
                rsq r0.z, r0.z
                mul r4.yzw, r0.zzzz, r2.yyzw  // ray<0:NaN,1:NaN,2:NaN>
                
                #line 97
                dp2 r0.z, r2.yzyy, r2.yzyy
                sqrt r0.z, r0.z
                mul r0.z, r0.w, r0.z
                add r0.x, r0.z, r0.x  // the<0:NaN>
                sincos null, r2.x, r0.x
                sincos r2.y, null, r0.x
                dp2 r4.x, r4.yzyy, r2.xyxx  // ray<0:NaN>
                
                #line 102
                sincos null, r2.x, r0.y
                mov r5.x, -r1.y
                sincos r2.y, null, r0.y
                sincos null, r5.y, r0.y
                dp2 r0.x, r4.xwxx, r2.xyxx  // ray<0:NaN>
                dp2 r0.z, r4.xwxx, r5.xyxx  // ray<2:NaN>
                nop 
                mov r1.xz, r1.xxzx  // origin<0: 0f,2:[-5.53783e+037f,5.53783e+037f]>
                mov r0.xz, r0.xxzx  // ray<0:NaN,2:NaN>
                
                #line 61
                mov r0.y, r1.w  // t<0:NaN:Inf>
                mov r0.w, r1.w  // i<0>
                loop 
                  ilt r1.y, r0.w, l(18)
                  breakc_z r1.y
                  mul r2.xy, r0.yyyy, r0.xzxx
                  add r2.xy, r1.xzxx, r2.xyxx  // p<0:NaN:Inf,2:NaN:Inf>
                  nop 
                  mov r2.xy, r2.xyxx  // p<0:NaN:Inf,2:NaN:Inf>
                
                #line 52
                  mul r2.xy, r2.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
                  frc r2.xy, r2.xyxx
                  mul r2.xy, r2.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000)
                  add r2.xz, r2.xxyx, l(-1.000000, 0.000000, -1.000000, 0.000000)  // q<0:NaN,2:NaN>
                  mul r2.y, r2.x, l(0.500000)  // q<1:NaN>
                  dp3 r1.y, r2.xyzx, r2.xyzx
                  sqrt r1.y, r1.y
                  add r1.y, r1.y, l(-0.300000)  // map<0:NaN>
                
                #line 63
                  mov r1.y, r1.y  // d<0:NaN>
                  mul r1.y, r1.y, l(0.500000)
                  add r0.y, r0.y, r1.y  // t<0:NaN:Inf>
                
                #line 61
                  iadd r0.w, r0.w, l(1)  // i<0>
                endloop 
                
                #line 66
                mov r0.y, r0.y  // trace<0:NaN:Inf>
                
                #line 104
                mov r0.y, r0.y  // t<0:NaN:Inf>
                
                #line 107
                mul r0.x, r0.y, r0.y
                mul r0.x, r0.x, l(0.070000)
                add r0.x, r0.x, l(1.000000)
                div r3.z, l(1.000000), r0.x  // c<2:NaN>
                
                #line 110
                mov o0.w, l(1.000000)  // PS<3: 1f>
                mov o0.xyz, r3.xyzx  // PS<0:NaN,1:NaN,2:NaN>
                ret 
                // Approximately 177 instruction slots used
                            
            };
        }

    }

}

